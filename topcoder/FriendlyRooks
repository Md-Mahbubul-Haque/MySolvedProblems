#include<bits/stdc++.h>
using namespace std;

#define pb push_back
#define pii pair<int,int>
#define ll long long
#define pll pair<long,long>
#define vi vector<int>
#define vii vector<pii>
#define vll vector<ll>
#define MOD 1000000007
#define EPS 1e-7
#define mem(x,y) memset(x,y,sizeof x)
#define INF 1e9
#define ff(i,a,b) for(int i=(a);i<=(b);i++)
#define fb(i,a,b) for(int i=(a);i>=(b);i--)
#define dist2D(x1,y1,x2,y2) ((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2))
#define dist3D(x1,y1,z1,x2,y2,z2) ((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)+(z1-z2)*(z1-z2))
#define sortv(v) sort(v.begin(),v.end())
#define debugx(x) cout<<"WTH! "<<x<<endl
#define debug(x,y) cout<<x<<" "<<y<<endl

class FriendlyRooks{
public:
    int numofColor=0;
    int taken[21][21];

    void recurse(int i,int j,vector<string> board){

        if(i==board.size()||j==board[0].size()) return;

        if(taken[i][j]==1) return;

        taken[i][j]=1;

        if(board[i][j]=='R'){
            numofColor=1;

            for(int ii=i;ii<board.size();ii++){
                recurse(ii,j,board);
            }
            for(int ii=j;ii<board[0].size();ii++){
                recurse(i,ii,board);
            }

            for(int ii=j;ii>=0;ii--){
                recurse(i,ii,board);
            }
            for(int ii=i;ii>=0;ii--) recurse(ii,j,board);

        }

    }



    int getMinFriendlyColoring(vector <string> board){

        mem(taken,-1);
        int ans=0;

        int si=board.size();
        int siz=board[0].size();

        for(int i=0;i<si;i++){
            for(int j=0;j<siz;j++){
                numofColor=0;

                if(taken[i][j]==-1){
                    recurse(i,j,board);
                }

                ans+=numofColor;

            }
        }

        return ans;

    }

};
