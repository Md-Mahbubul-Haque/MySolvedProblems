#include <bits/stdc++.h>
using namespace std;

#define dist2D(x1,y1,x2,y2)         ((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2))
#define dist3D(x1,y1,z1,x2,y2,z2)   ((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)+(z1-z2)*(z1-z2))
#define EPS                         1e-12
#define FastIO                      ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0)
#define FI                          freopen("in.txt","r",stdin)
#define FO                          freopen("out.txt","w",stdout)
#define fap(x)                      cout<<"WTH: "<<x<<endl
#define ff                          first
#define fof(i,x,y)                  for(int i=x;i<(int)y;i++)
#define fob(i,x,y)                  for(int i=x;i>=(int)y;i--)
#define INF                         1000000000
#define ld                          long double
#define ll                          long long
#define mem(x,y)                    memset(x,y,sizeof x)
#define mp                          make_pair
#define msi                         map<string,int>
#define mii                         map<int,int>
#define mis                         map<int,string>
#define MOD                         2147483647
#define PI                          acos(-1.0)
#define PQ                          priority_queue
#define pb                          push_back
#define pib                         pair<int,bool>
#define pii                         pair<int,int>
#define pll                         pair<ll,ll>
#define sfi(x)                      scanf("%d",&x)
#define sfii(x,y)                   scanf("%d%d",&x,&y)
#define sfiii(x,y,z)                scanf("%d%d%d",&x,&y,&z)
#define siz(x)                      (int)x.size()
#define sortv(v)                    sort(v.begin(),v.end())
#define ss                          second
#define ull                         unsigned long long
#define umsi                        unordered_map<string,int>
#define umii                        unordered_map<int,int>
#define umis                        unordered_map<int,string>
#define vb                          vector<bool>
#define vi                          vector<int>
#define vvi                         vector<vi>
#define vii                         vector<pii>
#define vvii                        vector<vii>
#define vll                         vector<ll>
#define vpll                        vector<pll>

//*
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <functional>
using namespace __gnu_pbds;
typedef tree<int,null_type,less<int>,rb_tree_tag,
        tree_order_statistics_node_update> ordered_set;

//os.order_of_key(v): returns how many elements strictly less than v
//os.find_by_order(k-1): returns kth smallest element's iterator
//*/

template<class T> class compare{
public:
    bool operator()(pair<T,T> &x,pair<T,T> &y){
        if(x.first==y.first){
            return x.ss>y.ss;
        }
        return x.ff>y.ff;
    }
};

//template<class T> ostream& operator<<(ostream &os,const pair<T,T> &a) { os<<a.ff<<" "<<a.ss; }
template<class T> void print(vector<T> &vec){
    for(int i=1;i<siz(vec);i++) cout<<vec[i]<<" ";cout<<endl;
}
template<class T> void print(set<T> &s) {
    for(auto it: s) cout<<it<<" "; cout<<endl;
}
template<class T> void print(list<T> &lst) {
    for(auto it: lst) cout<<it<<" "; cout<<endl;
}
template<class T> ll power(T a,int b){
    ll po=1; while(b--) po*=a; return po;
}

template<class T> pair<T,T> operator+(const pair<T,T> &a,const pair<T,T> &b){ return {a.ff+b.ff,a.ss+b.ss}; }
template<class T> pair<T,T> operator-(const pair<T,T> &a,const pair<T,T> &b){ return {a.ff-b.ff,a.ss-b.ss}; }
template<class T> pair<T,T> operator*(const pair<T,T> &a,const pair<T,T> &b){ return {a.ff*b.ff,a.ss*b.ss}; }
template<class T> pair<T,T> operator%(const pair<T,T> &a,const pair<T,T> &b){ return {a.ff%b.ff,a.ss%b.ss}; }
template<class T,class U> pair<T,T> operator+(const pair<T,T> &a,const U &b){ return { a.ff+b,a.ss+b}; }
template<class T,class U> pair<T,T> operator*(const pair<T,T> &a,const U &b){ return { a.ff*b,a.ss*b}; }

int Set(int N,int pos) { return N=N|(1<<pos); }
int reset(int N,int pos){ return N=N&~(1<<pos);}
bool check(int N,int pos){  return (bool) (N&(1<<pos));}

///=======================================template=======================================//
#define maxn 1000007
ll a[maxn];
ll f(int n){
    if(a[n]) return a[n];
    return a[n]=(16807*f(n-1))%MOD;
}

ll ara[105][105];
ll pos[105];
set<pii> cols[105];
int tempp[104];

class QueenInterference{
public:
    ordered_set os;
    int rndcnt=1;
    void pre(int n){
        a[1]=1;
        for(int i=1;i<=n;i++){
            ll val=f(rndcnt)%n+1;
            //cout<<val<<endl;
            rndcnt++;
            pos[i]=val;
        }

        for(int i=1;i<=n;i++){
            int j=pos[i];

            for(int k=j+1,k1=j-1,col=i+1;col<=n;col++){
                if(k<=n) ara[k][col]++;
                if(k1>0) ara[k1][col]++;
                ara[j][col]++;
                k++,k1--;
            }

            for(int k=j+1,k1=j-1,col=i-1;col>0;col--){
                if(k<=n) ara[k][col]++;
                if(k1>0) ara[k1][col]++;
                ara[j][col]++;
                k++,k1--;
            }
        }

        for(int i=1;i<=n;i++){
            for(int j=1;j<=n;j++){
                cols[j].insert(mp(ara[i][j],i));
            }
        }

        for(int i=1;i<=n;i++){
            if(ara[pos[i]][i]>0) os.insert(i);
        }
    }

    int numSteps(int n){
        pre(n);

        int cnt=0;

        while(os.size()){
            cnt++;

            int sz=(int)os.size();
            ll rnd=f(rndcnt)%sz+1;
           // cout<<rnd<<endl;
            rndcnt++;

            int col=*os.find_by_order(rnd-1);
            //cout<<col<<":::"<<endl;
            os.erase(col);

            ll row=pos[col];

            for(int k=row+1,k1=row-1,c=col+1;c<=n;c++){
                if(k<=n){
                    cols[c].erase(mp(ara[k][c],k));
                    ara[k][c]--;
                    cols[c].insert(mp(ara[k][c],k));
                    if(pos[c]==k and ara[k][c]==0)
                        os.erase(c);
                }
                if(k1>0){
                    cols[c].erase(mp(ara[k1][c],k1));
                    ara[k1][c]--;
                    cols[c].insert(mp(ara[k1][c],k1));


                    if(pos[c]==k1 and ara[k1][c]==0)
                        os.erase(c);
                }
                cols[c].erase(mp(ara[row][c],row));
                ara[row][c]--;
                if(pos[c]==row and ara[row][c]==0)
                    os.erase(c);
                cols[c].insert(mp(ara[row][c],row));
                k++,k1--;
            }

            for(int k=row+1,k1=row-1,c=col-1;c>0;c--){
                if(k<=n){
                    cols[c].erase(mp(ara[k][c],k));
                    ara[k][c]--;
                    cols[c].insert(mp(ara[k][c],k));
                    if(pos[c]==k and ara[k][c]==0)
                        os.erase(c);
                }
                if(k1>0){
                    cols[c].erase(mp(ara[k1][c],k1));
                    ara[k1][c]--;
                    cols[c].insert(mp(ara[k1][c],k1));


                    if(pos[c]==k1 and ara[k1][c]==0)
                        os.erase(c);
                }
                cols[c].erase(mp(ara[row][c],row));
                ara[row][c]--;
                if(pos[c]==row and ara[row][c]==0)
                    os.erase(c);
                cols[c].insert(mp(ara[row][c],row));
                k++,k1--;
            }

            auto it=cols[col].begin();
            auto it1=cols[col].begin();
            it1++;

            if((*it).ff==(*it1).ff){
                int cntt=0;
                int vall=(*it).ff;
                for(auto it2:cols[col]){
                    if(it2.ff==vall) {
                        tempp[cntt+1]=it2.ss;
                        cntt++;
                    }
                    else break;
                }

                rnd=f(rndcnt)%cntt+1;
                rndcnt++;
                //fap(rnd);
                //cout<<rnd<<endl;
                row=tempp[rnd];
                pos[col]=row;

                if(ara[pos[col]][col]>0) os.insert(col);

            }
            else{

                pos[col]=(*it).ss;
                if(ara[pos[col]][col]>0) os.insert(col);

                row=pos[col];

            }

            for(int k=row+1,k1=row-1,c=col+1;c<=n;c++){
                if(k<=n){
                    cols[c].erase(mp(ara[k][c],k));
                    ara[k][c]++;
                    cols[c].insert(mp(ara[k][c],k));
                    if(pos[c]==k and ara[k][c]==1)
                        os.insert(c);
                }
                if(k1>0){
                    cols[c].erase(mp(ara[k1][c],k1));
                    ara[k1][c]++;
                    cols[c].insert(mp(ara[k1][c],k1));


                    if(pos[c]==k1 and ara[k1][c]==1)
                        os.insert(c);
                }
                cols[c].erase(mp(ara[row][c],row));
                ara[row][c]++;
                if(pos[c]==row and ara[row][c]==1)
                    os.insert(c);
                cols[c].insert(mp(ara[row][c],row));
                k++,k1--;
            }

            for(int k=row+1,k1=row-1,c=col-1;c>0;c--){
                if(k<=n){
                    cols[c].erase(mp(ara[k][c],k));
                    ara[k][c]++;
                    cols[c].insert(mp(ara[k][c],k));
                    if(pos[c]==k and ara[k][c]==1)
                        os.insert(c);
                }
                if(k1>0){
                    cols[c].erase(mp(ara[k1][c],k1));
                    ara[k1][c]++;
                    cols[c].insert(mp(ara[k1][c],k1));


                    if(pos[c]==k1 and ara[k1][c]==1)
                        os.insert(c);
                }
                cols[c].erase(mp(ara[row][c],row));
                ara[row][c]++;
                if(pos[c]==row and ara[row][c]==1)
                    os.insert(c);
                cols[c].insert(mp(ara[row][c],row));
                k++,k1--;
            }


        }
        return cnt;
    }
};
